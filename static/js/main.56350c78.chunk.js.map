{"version":3,"sources":["axiosInstance.js","components/Post/Post.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Posts/Posts.js","containers/Blog/Blog.js","hoc/asyncComponent.js","App.js","registerServiceWorker.js","index.js"],"names":["axiosInstance","axios","create","baseURL","defaults","headers","common","get","post","props","console","log","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","match","params","id","then","response","catch","error","this","loadData","setState","data","style","textAlign","body","Component","Posts","posts","selectedId","postSelectedHandler","history","push","url","updatedPosts","slice","map","Author","path","exact","component","AsyncNewPost","importComponent","cmp","default","err","C","AsyncComponent","Blog","auth","to","pathname","hash","search","from","App","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.56350c78.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com'\r\n})\r\n\r\naxiosInstance.defaults.headers.common['Authorization'] = \"Auth-Token from axiosInstance\";\r\naxiosInstance.defaults.headers.get['huge'] = 'Huge axiosInstance';\r\n\r\nexport default axiosInstance;","import React from 'react';\n// import { withRouter} from 'react-router-dom';\n\nimport './Post.css';\n\nconst post = (props) => {\n    console.log(\"[Post]\",props)\n    return(\n    <article className=\"Post\" onClick={props.clicked}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>)\n}\n\n// export default withRouter(post);\nexport default post;","import React, { Component } from 'react';\n\nimport './FullPost.css';\nimport axios from 'axios';\n\nclass FullPost extends Component {\n    state={\n        loadedPost: null\n    }\n\n    componentDidMount(){\n        console.log(\"FullPost : \",this.props)\n        this.loadData();\n    }\n\n    componentDidUpdate() {\n        this.loadData();\n    }\n\n    loadData(){\n        if(this.props.match.params.id && (!this.state.loadedPost || (this.state.loadedPost && ( this.state.loadedPost.id !== +this.props.match.params.id)))){\n            axios.get('/posts/'+this.props.match.params.id)\n            .then(response => {\n                // console.log(response.data)\n                this.setState({loadedPost: response.data})\n            })\n        }\n    }\n\n    deletePostHandler = () =>{\n        axios.delete('/posts/'+this.props.match.params.id)\n            .then(response =>{\n                console.log(response);\n            })\n            .catch(error => {\n                console.log(error);\n            })\n    }\n\n    render () {\n        let post = <p style={{textAlign: 'center'}}>Please select a Post!</p>;\n        if(this.props.match.params.id){\n            post = <p style={{textAlign: 'center'}}>Loading...!</p>\n        }\n        if(this.state.loadedPost){\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                    </div>\n                </div>\n            );\n        }\n        \n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\r\nimport axios from '../../../axiosInstance';\r\nimport { Route, Link } from 'react-router-dom';\r\n\r\nimport Post from '../../../components/Post/Post';\r\nimport FullPost from '../FullPost/FullPost';\r\nimport './Posts.css';\r\n\r\nclass Posts extends Component{\r\n    state={\r\n        posts: [],\r\n        selectedId: null,\r\n        error: false\r\n    }\r\n\r\n    postSelectedHandler = (id) =>{\r\n        console.log(\"[Posts.js] \", id);\r\n        // this.setState({selectedId: id})\r\n        // this.props.history.push({pathname: \"/\" + id});\r\n        this.props.history.push(this.props.match.url + \"/\" + id);\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(\"[Posts.js] props \",this.props)\r\n        axios.get('/posts')\r\n            .then(response => {\r\n                const postsFromServer = response.data.slice(0, 4);\r\n                const updatedPosts = postsFromServer.map(post => ({...post, Author: 'Pugazh'}))\r\n                this.setState({posts: updatedPosts})\r\n                // console.log(response)\r\n            })\r\n            .catch(error =>{\r\n                /* console.log(error) */\r\n                this.setState({error: true})\r\n            });\r\n    }\r\n    render(){\r\n        let posts=this.state.posts.map(post => (\r\n            // <Link to={\"/posts/\" + post.id} key={post.id}>\r\n                <Post\r\n                    key={post.id}\r\n                    title={post.title}\r\n                    author={post.Author}\r\n                    clicked={()=>this.postSelectedHandler(post.id)}/>\r\n            // </Link>\r\n            )\r\n            )\r\n        if(this.state.error){\r\n            posts=<p style={{textAlign: 'center'}}>Something went Wrong!</p>\r\n        }\r\n        return <div>\r\n            <section className=\"Posts\">\r\n                {posts}\r\n            </section>\r\n            <Route path={this.props.match.url + '/:id'} exact component={FullPost} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom';\n\n// import Post from '../../components/Post/Post';\nimport Posts from './Posts/Posts';\n// import NewPost from './NewPost/NewPost';\n// import FullPost from './FullPost/FullPost';\nimport './Blog.css';\n// import axios from 'axios';\n// import axios from '../../../src/axiosInstance';\nimport AsyncComponent from '../../hoc/asyncComponent';\n\nconst AsyncNewPost = AsyncComponent(()=>{\n    return import('./NewPost/NewPost');\n})\n\nclass Blog extends Component {\n    state = {\n        auth: true\n    }\n    render () {\n        return (\n            <div className=\"Blog\">\n                <header>\n                    <ul>\n                        <li><NavLink to=\"/posts\" >Posts</NavLink></li>\n                        <li><NavLink to={{\n                            pathname: \"/new-post\",\n                            hash: \"#submit\",\n                            search: \"?quick-sumit=true\"\n                        }} exact >New Post</NavLink></li>\n                    </ul>\n                </header>\n\n                {/* <Posts/> */}\n                {/* <Route path=\"/\" exact render={()=><Posts/>} /> */}\n\n                <Switch>\n                    {this.state.auth ? <Route path=\"/new-post\" exact component={AsyncNewPost}/> : null}\n                    <Route path=\"/posts\" component={Posts} />\n                    <Redirect from=\"/\" to=\"/posts\" />\n                </Switch>\n\n                {/* <Route path={this.state.path} exact component={this.state.component} /> */}\n                {/* <section>\n                    <FullPost id={this.state.selectedId}/>\n                </section>\n                <section>\n                    <NewPost />\n                </section> */}\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, {Component} from 'react';\r\n\r\nconst asyncComponent = (importComponent) =>{\r\n    return class extends Component{\r\n        state={\r\n            component: null\r\n        }\r\n\r\n        componentDidMount(){\r\n            importComponent()\r\n                .then(cmp => {\r\n                    this.setState({component: cmp.default});\r\n                })\r\n                .catch(err =>{\r\n                    console.log(err)\r\n                })\r\n        }\r\n\r\n        render(){\r\n            const C = this.state.component;\r\n\r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default asyncComponent;","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      // <BrowserRouter basename=\"/my-app\"> /*if react app present in sub folder*/\n      <BrowserRouter>\n        <div className=\"App\">\n          <Blog />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios';\n\naxios.defaults.baseURL = \"https://jsonplaceholder.typicode.com\";\naxios.defaults.headers.common['Authorization'] = \"Auth-Token\";\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\naxios.interceptors.request.use( request =>{\n    console.log(\"[Index] request : \",request);\n    //Edit request config\n    return(request);\n} , error => {\n    console.log(error);\n    return Promise.reject(error);\n})\n\naxios.interceptors.response.use( response =>{\n    console.log(\"[Index] response : \",response);\n    //Edit request config\n    return(response);\n} , error => {\n    console.log(\"[Index] : \",error);\n    return Promise.reject(error);\n})\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n"],"sourceRoot":""}